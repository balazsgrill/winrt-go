// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package foundation

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
)

const SignatureUri string = "rc(Windows.Foundation.Uri;{9e365e57-48b2-4160-956f-c7385120bbfc})"

type Uri struct {
	ole.IUnknown
}

func (impl *Uri) GetAbsoluteUri() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetAbsoluteUri()
}

func (impl *Uri) GetDisplayUri() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetDisplayUri()
}

func (impl *Uri) GetDomain() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetDomain()
}

func (impl *Uri) GetExtension() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetExtension()
}

func (impl *Uri) GetFragment() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetFragment()
}

func (impl *Uri) GetHost() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetHost()
}

func (impl *Uri) GetPassword() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetPassword()
}

func (impl *Uri) GetPath() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetPath()
}

func (impl *Uri) GetQuery() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetQuery()
}

func (impl *Uri) GetQueryParsed() (*WwwFormUrlDecoder, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetQueryParsed()
}

func (impl *Uri) GetRawUri() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetRawUri()
}

func (impl *Uri) GetSchemeName() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetSchemeName()
}

func (impl *Uri) GetUserName() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetUserName()
}

func (impl *Uri) GetPort() (int32, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetPort()
}

func (impl *Uri) GetSuspicious() (bool, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.GetSuspicious()
}

func (impl *Uri) Equals(pUri *Uri) (bool, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.Equals(pUri)
}

func (impl *Uri) CombineUri(relativeUri string) (*Uri, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClass))
	defer itf.Release()
	v := (*iUriRuntimeClass)(unsafe.Pointer(itf))
	return v.CombineUri(relativeUri)
}

func (impl *Uri) GetAbsoluteCanonicalUri() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClassWithAbsoluteCanonicalUri))
	defer itf.Release()
	v := (*iUriRuntimeClassWithAbsoluteCanonicalUri)(unsafe.Pointer(itf))
	return v.GetAbsoluteCanonicalUri()
}

func (impl *Uri) GetDisplayIri() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiUriRuntimeClassWithAbsoluteCanonicalUri))
	defer itf.Release()
	v := (*iUriRuntimeClassWithAbsoluteCanonicalUri)(unsafe.Pointer(itf))
	return v.GetDisplayIri()
}

func (impl *Uri) ToString() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDIStringable))
	defer itf.Release()
	v := (*IStringable)(unsafe.Pointer(itf))
	return v.ToString()
}

const GUIDiUriRuntimeClass string = "9e365e57-48b2-4160-956f-c7385120bbfc"
const SignatureiUriRuntimeClass string = "{9e365e57-48b2-4160-956f-c7385120bbfc}"

type iUriRuntimeClass struct {
	ole.IInspectable
}

type iUriRuntimeClassVtbl struct {
	ole.IInspectableVtbl

	GetAbsoluteUri uintptr
	GetDisplayUri  uintptr
	GetDomain      uintptr
	GetExtension   uintptr
	GetFragment    uintptr
	GetHost        uintptr
	GetPassword    uintptr
	GetPath        uintptr
	GetQuery       uintptr
	GetQueryParsed uintptr
	GetRawUri      uintptr
	GetSchemeName  uintptr
	GetUserName    uintptr
	GetPort        uintptr
	GetSuspicious  uintptr
	Equals         uintptr
	CombineUri     uintptr
}

func (v *iUriRuntimeClass) VTable() *iUriRuntimeClassVtbl {
	return (*iUriRuntimeClassVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iUriRuntimeClass) GetAbsoluteUri() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAbsoluteUri,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetDisplayUri() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDisplayUri,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetDomain() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDomain,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetExtension() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetExtension,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetFragment() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetFragment,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetHost() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetHost,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetPassword() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPassword,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetPath() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPath,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetQuery() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetQuery,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetQueryParsed() (*WwwFormUrlDecoder, error) {
	var out *WwwFormUrlDecoder
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetQueryParsed,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out WwwFormUrlDecoder
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iUriRuntimeClass) GetRawUri() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetRawUri,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetSchemeName() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetSchemeName,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetUserName() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetUserName,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClass) GetPort() (int32, error) {
	var out int32
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPort,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out int32
	)

	if hr != 0 {
		return 0, ole.NewError(hr)
	}

	return out, nil
}

func (v *iUriRuntimeClass) GetSuspicious() (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetSuspicious,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *iUriRuntimeClass) Equals(pUri *Uri) (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().Equals,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(pUri)), // in Uri
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}

func (v *iUriRuntimeClass) CombineUri(relativeUri string) (*Uri, error) {
	var out *Uri
	relativeUriHStr, err := ole.NewHString(relativeUri)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().CombineUri,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(relativeUriHStr),      // in string
		uintptr(unsafe.Pointer(&out)), // out Uri
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiUriRuntimeClassWithAbsoluteCanonicalUri string = "758d9661-221c-480f-a339-50656673f46f"
const SignatureiUriRuntimeClassWithAbsoluteCanonicalUri string = "{758d9661-221c-480f-a339-50656673f46f}"

type iUriRuntimeClassWithAbsoluteCanonicalUri struct {
	ole.IInspectable
}

type iUriRuntimeClassWithAbsoluteCanonicalUriVtbl struct {
	ole.IInspectableVtbl

	GetAbsoluteCanonicalUri uintptr
	GetDisplayIri           uintptr
}

func (v *iUriRuntimeClassWithAbsoluteCanonicalUri) VTable() *iUriRuntimeClassWithAbsoluteCanonicalUriVtbl {
	return (*iUriRuntimeClassWithAbsoluteCanonicalUriVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iUriRuntimeClassWithAbsoluteCanonicalUri) GetAbsoluteCanonicalUri() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAbsoluteCanonicalUri,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iUriRuntimeClassWithAbsoluteCanonicalUri) GetDisplayIri() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDisplayIri,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

const GUIDiUriEscapeStatics string = "c1d432ba-c824-4452-a7fd-512bc3bbe9a1"
const SignatureiUriEscapeStatics string = "{c1d432ba-c824-4452-a7fd-512bc3bbe9a1}"

type iUriEscapeStatics struct {
	ole.IInspectable
}

type iUriEscapeStaticsVtbl struct {
	ole.IInspectableVtbl

	UriUnescapeComponent uintptr
	UriEscapeComponent   uintptr
}

func (v *iUriEscapeStatics) VTable() *iUriEscapeStaticsVtbl {
	return (*iUriEscapeStaticsVtbl)(unsafe.Pointer(v.RawVTable))
}

func UriUnescapeComponent(toUnescape string) (string, error) {
	inspectable, err := ole.RoGetActivationFactory("Windows.Foundation.Uri", ole.NewGUID(GUIDiUriEscapeStatics))
	if err != nil {
		return "", err
	}
	v := (*iUriEscapeStatics)(unsafe.Pointer(inspectable))

	var outHStr ole.HString
	toUnescapeHStr, err := ole.NewHString(toUnescape)
	if err != nil {
		return "", err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().UriUnescapeComponent,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(toUnescapeHStr),           // in string
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func UriEscapeComponent(toEscape string) (string, error) {
	inspectable, err := ole.RoGetActivationFactory("Windows.Foundation.Uri", ole.NewGUID(GUIDiUriEscapeStatics))
	if err != nil {
		return "", err
	}
	v := (*iUriEscapeStatics)(unsafe.Pointer(inspectable))

	var outHStr ole.HString
	toEscapeHStr, err := ole.NewHString(toEscape)
	if err != nil {
		return "", err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().UriEscapeComponent,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(toEscapeHStr),             // in string
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

const GUIDiUriRuntimeClassFactory string = "44a9796f-723e-4fdf-a218-033e75b0c084"
const SignatureiUriRuntimeClassFactory string = "{44a9796f-723e-4fdf-a218-033e75b0c084}"

type iUriRuntimeClassFactory struct {
	ole.IInspectable
}

type iUriRuntimeClassFactoryVtbl struct {
	ole.IInspectableVtbl

	UriCreateUri             uintptr
	UriCreateWithRelativeUri uintptr
}

func (v *iUriRuntimeClassFactory) VTable() *iUriRuntimeClassFactoryVtbl {
	return (*iUriRuntimeClassFactoryVtbl)(unsafe.Pointer(v.RawVTable))
}

func UriCreateUri(uri string) (*Uri, error) {
	inspectable, err := ole.RoGetActivationFactory("Windows.Foundation.Uri", ole.NewGUID(GUIDiUriRuntimeClassFactory))
	if err != nil {
		return nil, err
	}
	v := (*iUriRuntimeClassFactory)(unsafe.Pointer(inspectable))

	var out *Uri
	uriHStr, err := ole.NewHString(uri)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().UriCreateUri,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(uriHStr),              // in string
		uintptr(unsafe.Pointer(&out)), // out Uri
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func UriCreateWithRelativeUri(baseUri string, relativeUri string) (*Uri, error) {
	inspectable, err := ole.RoGetActivationFactory("Windows.Foundation.Uri", ole.NewGUID(GUIDiUriRuntimeClassFactory))
	if err != nil {
		return nil, err
	}
	v := (*iUriRuntimeClassFactory)(unsafe.Pointer(inspectable))

	var out *Uri
	baseUriHStr, err := ole.NewHString(baseUri)
	if err != nil {
		return nil, err
	}
	relativeUriHStr, err := ole.NewHString(relativeUri)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().UriCreateWithRelativeUri,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(baseUriHStr),          // in string
		uintptr(relativeUriHStr),      // in string
		uintptr(unsafe.Pointer(&out)), // out Uri
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
