// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package storage

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
)

const GUIDIStorageFolder string = "72d1cb78-b3ef-4f75-a80b-6fd9dae2944b"
const SignatureIStorageFolder string = "{72d1cb78-b3ef-4f75-a80b-6fd9dae2944b}"

type IStorageFolder struct {
	ole.IInspectable
}

type IStorageFolderVtbl struct {
	ole.IInspectableVtbl

	CreateFileAsyncOverloadDefaultOptions              uintptr
	CreateFileAsync                                    uintptr
	CreateFolderAsyncOverloadDefaultOptions            uintptr
	CreateFolderAsync                                  uintptr
	GetFileAsync                                       uintptr
	GetFolderAsync                                     uintptr
	GetItemAsync                                       uintptr
	GetFilesAsyncOverloadDefaultOptionsStartAndCount   uintptr
	GetFoldersAsyncOverloadDefaultOptionsStartAndCount uintptr
	GetItemsAsyncOverloadDefaultStartAndCount          uintptr
}

func (v *IStorageFolder) VTable() *IStorageFolderVtbl {
	return (*IStorageFolderVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IStorageFolder) CreateFileAsyncOverloadDefaultOptions(desiredName string) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	desiredNameHStr, err := ole.NewHString(desiredName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().CreateFileAsyncOverloadDefaultOptions,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(desiredNameHStr),      // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) CreateFileAsync(desiredName string, options CreationCollisionOption) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	desiredNameHStr, err := ole.NewHString(desiredName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().CreateFileAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(desiredNameHStr),      // in string
		uintptr(options),              // in CreationCollisionOption
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) CreateFolderAsyncOverloadDefaultOptions(desiredName string) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	desiredNameHStr, err := ole.NewHString(desiredName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().CreateFolderAsyncOverloadDefaultOptions,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(desiredNameHStr),      // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) CreateFolderAsync(desiredName string, options CreationCollisionOption) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	desiredNameHStr, err := ole.NewHString(desiredName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().CreateFolderAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(desiredNameHStr),      // in string
		uintptr(options),              // in CreationCollisionOption
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) GetFileAsync(name string) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	nameHStr, err := ole.NewHString(name)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetFileAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(nameHStr),             // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) GetFolderAsync(name string) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	nameHStr, err := ole.NewHString(name)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetFolderAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(nameHStr),             // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) GetItemAsync(name string) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	nameHStr, err := ole.NewHString(name)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetItemAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(nameHStr),             // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) GetFilesAsyncOverloadDefaultOptionsStartAndCount() (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetFilesAsyncOverloadDefaultOptionsStartAndCount,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) GetFoldersAsyncOverloadDefaultOptionsStartAndCount() (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetFoldersAsyncOverloadDefaultOptionsStartAndCount,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageFolder) GetItemsAsyncOverloadDefaultStartAndCount() (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetItemsAsyncOverloadDefaultStartAndCount,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
