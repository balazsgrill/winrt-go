// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package storage

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
)

const GUIDIStorageItem string = "4207a996-ca2f-42f7-bde8-8b10457a7f30"
const SignatureIStorageItem string = "{4207a996-ca2f-42f7-bde8-8b10457a7f30}"

type IStorageItem struct {
	ole.IInspectable
}

type IStorageItemVtbl struct {
	ole.IInspectableVtbl

	RenameAsyncOverloadDefaultOptions uintptr
	RenameAsync                       uintptr
	DeleteAsyncOverloadDefaultOptions uintptr
	DeleteAsync                       uintptr
	GetBasicPropertiesAsync           uintptr
	GetName                           uintptr
	GetPath                           uintptr
	GetAttributes                     uintptr
	GetDateCreated                    uintptr
	IsOfType                          uintptr
}

func (v *IStorageItem) VTable() *IStorageItemVtbl {
	return (*IStorageItemVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IStorageItem) RenameAsyncOverloadDefaultOptions(desiredName string) (*foundation.IAsyncAction, error) {
	var out *foundation.IAsyncAction
	desiredNameHStr, err := ole.NewHString(desiredName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RenameAsyncOverloadDefaultOptions,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(desiredNameHStr),      // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncAction
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) RenameAsync(desiredName string, option NameCollisionOption) (*foundation.IAsyncAction, error) {
	var out *foundation.IAsyncAction
	desiredNameHStr, err := ole.NewHString(desiredName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RenameAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(desiredNameHStr),      // in string
		uintptr(option),               // in NameCollisionOption
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncAction
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) DeleteAsyncOverloadDefaultOptions() (*foundation.IAsyncAction, error) {
	var out *foundation.IAsyncAction
	hr, _, _ := syscall.SyscallN(
		v.VTable().DeleteAsyncOverloadDefaultOptions,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncAction
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) DeleteAsync(option StorageDeleteOption) (*foundation.IAsyncAction, error) {
	var out *foundation.IAsyncAction
	hr, _, _ := syscall.SyscallN(
		v.VTable().DeleteAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(option),               // in StorageDeleteOption
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncAction
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) GetBasicPropertiesAsync() (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetBasicPropertiesAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) GetName() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetName,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *IStorageItem) GetPath() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPath,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *IStorageItem) GetAttributes() (FileAttributes, error) {
	var out FileAttributes
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetAttributes,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out FileAttributes
	)

	if hr != 0 {
		return FileAttributesNormal, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) GetDateCreated() (foundation.DateTime, error) {
	var out foundation.DateTime
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDateCreated,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.DateTime
	)

	if hr != 0 {
		return foundation.DateTime{}, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem) IsOfType(mType StorageItemTypes) (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().IsOfType,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(mType),                // in StorageItemTypes
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}
