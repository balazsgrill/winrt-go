// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package storage

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
)

const GUIDIStorageItem2 string = "53f926d2-083c-4283-b45b-81c007237e44"
const SignatureIStorageItem2 string = "{53f926d2-083c-4283-b45b-81c007237e44}"

type IStorageItem2 struct {
	ole.IInspectable
}

type IStorageItem2Vtbl struct {
	ole.IInspectableVtbl

	GetParentAsync uintptr
	IsEqual        uintptr
}

func (v *IStorageItem2) VTable() *IStorageItem2Vtbl {
	return (*IStorageItem2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IStorageItem2) GetParentAsync() (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetParentAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItem2) IsEqual(item *IStorageItem) (bool, error) {
	var out bool
	hr, _, _ := syscall.SyscallN(
		v.VTable().IsEqual,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(item)), // in IStorageItem
		uintptr(unsafe.Pointer(&out)), // out bool
	)

	if hr != 0 {
		return false, ole.NewError(hr)
	}

	return out, nil
}
