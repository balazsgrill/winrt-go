// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package storage

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation"
	"github.com/saltosystems/winrt-go/windows/storage/fileproperties"
)

const GUIDIStorageItemProperties string = "86664478-8029-46fe-a789-1c2f3e2ffb5c"
const SignatureIStorageItemProperties string = "{86664478-8029-46fe-a789-1c2f3e2ffb5c}"

type IStorageItemProperties struct {
	ole.IInspectable
}

type IStorageItemPropertiesVtbl struct {
	ole.IInspectableVtbl

	GetThumbnailAsyncOverloadDefaultSizeDefaultOptions uintptr
	GetThumbnailAsyncOverloadDefaultOptions            uintptr
	GetThumbnailAsync                                  uintptr
	GetDisplayName                                     uintptr
	GetDisplayType                                     uintptr
	GetFolderRelativeId                                uintptr
	GetProperties                                      uintptr
}

func (v *IStorageItemProperties) VTable() *IStorageItemPropertiesVtbl {
	return (*IStorageItemPropertiesVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *IStorageItemProperties) GetThumbnailAsyncOverloadDefaultSizeDefaultOptions(mode fileproperties.ThumbnailMode) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetThumbnailAsyncOverloadDefaultSizeDefaultOptions,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(mode),                 // in fileproperties.ThumbnailMode
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItemProperties) GetThumbnailAsyncOverloadDefaultOptions(mode fileproperties.ThumbnailMode, requestedSize uint32) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetThumbnailAsyncOverloadDefaultOptions,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(mode),                 // in fileproperties.ThumbnailMode
		uintptr(requestedSize),        // in uint32
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItemProperties) GetThumbnailAsync(mode fileproperties.ThumbnailMode, requestedSize uint32, options fileproperties.ThumbnailOptions) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetThumbnailAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(mode),                 // in fileproperties.ThumbnailMode
		uintptr(requestedSize),        // in uint32
		uintptr(options),              // in fileproperties.ThumbnailOptions
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *IStorageItemProperties) GetDisplayName() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDisplayName,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *IStorageItemProperties) GetDisplayType() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDisplayType,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *IStorageItemProperties) GetFolderRelativeId() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetFolderRelativeId,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}
